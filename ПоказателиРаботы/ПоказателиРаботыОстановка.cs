using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Транспорт2017
{
    public class ПоказателиРаботыОстановка
    {
        private int кодОстВладельца;//ссылка на остановку - владельца показателей работы
        //private SortedList[] средВремяОжидНаОстПоВремениИНаправл;

        //public int КолЧасов;
        public int СуммКолНедождПассажиров;
        public int СуммКолПересадочПассажиров;
        public int СуммКолПасОставшНаОст;
        public int МаксКолАвтоНаОст;
        public int МаксКолОжидПассжиров;
        public double СредВремяОжидНаОст;
        //public Shared масКодовОстановок() As Integer
        public int СуммКолОтпрПассажиров;
        public int СуммКолПоявившПассажиров;
        public int СуммКолПрибПассажиров;

        public int КодОстановки { get { return кодОстВладельца; } }
        public ПоказателиРаботыОстановка(int кодОст)
        {
            кодОстВладельца = кодОст;
        }
        //public SortedList СредВремяОжидНаОстПоВремениИНаправл(int ind)
        //{
        //    return средВремяОжидНаОстПоВремениИНаправл[ind];
        //}
        public void Инициализация()
        {
            СуммКолНедождПассажиров = 0;
            СуммКолПересадочПассажиров = 0;
            СуммКолПасОставшНаОст = 0;
            СуммКолОтпрПассажиров = 0;
            СуммКолПрибПассажиров = 0;
            МаксКолАвтоНаОст = 0;
            МаксКолОжидПассжиров = 0;
            СредВремяОжидНаОст = 0;
            СуммКолПоявившПассажиров = 0;
            //for (int i = 0; i < средВремяОжидНаОстПоВремениИНаправл.Length; i++)
            //    средВремяОжидНаОстПоВремениИНаправл[i] = null;//пустой массив
        }

        public void приездАвто(Авто авто_arg, List<Авто> массивАвто)
        {
            МаксКолАвтоНаОст = (МаксКолАвтоНаОст >= массивАвто.Count ? МаксКолАвтоНаОст : массивАвто.Count);
        }
        public void посадкаПассажира(Пассажир пас)
        {
            //расчет среднего ожидания времени на остановке и количества отправленных пассажиров
            СуммКолОтпрПассажиров++;
            //текущее среднее значение расчитывается так: ср[n+1]=(cp[n]*n+x[n+1])/(n+1)
            СредВремяОжидНаОст = (СредВремяОжидНаОст * (СуммКолОтпрПассажиров - 1) + пас.времяОжиданияНаОстановке) / СуммКолОтпрПассажиров;
        }

        public void высадкаПассажира(Пассажир пас)
        { СуммКолПрибПассажиров++; }

        public void появлениеПассажира(Пассажир пас, bool пересадочный = false)
        {
            СуммКолПересадочПассажиров += (пересадочный ? 1 : 0);
            СуммКолПоявившПассажиров++;
        }

        public void завершениеТакта(List<Пассажир> массивПас, int текТакт)
        {
            if (МаксКолОжидПассжиров < массивПас.Count)
                МаксКолОжидПассжиров = массивПас.Count;
        }
        public void завершениеМоделирования(List<Пассажир> массивВсехПас, int колЧасов, int колПасНаОст)
        {
            СуммКолПасОставшНаОст = колПасНаОст;
            //КолЧасов = колЧасов;
            //int i, j, номЧасПоявл, номЧасПосадки, времяПосадки;
            //SortedList[] колПасПоЧасИНаправл = new SortedList[колЧасов];

            ////расчет списка (матрицы) Времени Ожидания пассажиров на остановке
            //средВремяОжидНаОстПоВремениИНаправл = new SortedList[колЧасов];
            //for (i = 0; i < колЧасов; i++)
            //{
            //    средВремяОжидНаОстПоВремениИНаправл[i] = new SortedList();
            //    колПасПоЧасИНаправл[i] = new SortedList();
            //}

            //foreach (Пассажир пас in массивВсехПас)
            //{
            //    // проверить на появление на текущей остановке
            //    if (пас.КодОстОтправления == кодОстВладельца)
            //    { //определить номер часа отправления пас
            //        номЧасПоявл = пас.ВремяПоявленияНаОстановке / 60;
            //    //определить номер часа посадки пас
            //    //если пассажир не садился в авто до конца моделирования
            //    if (пас.времяОжиданияНаОстановке < 0)
            //    {
            //        номЧасПосадки = колЧасов - 1;
            //        времяПосадки = колЧасов * 60 - 1;
            //    }
            //    else
            //    {
            //        номЧасПосадки = пас.ВремяПосадки / 60;
            //        времяПосадки = пас.ВремяПосадки;
            //    }
            //    //если время появления и посадки в одном часу
            //    if (номЧасПоявл == номЧасПосадки)
            //    {// добавить время ожидания в список
            //        //если в списке нет такой остановки назначения, то добавить
            //        if (средВремяОжидНаОстПоВремениИНаправл[номЧасПоявл].ContainsKey(пас.КодОстНазначения) == false)
            //        {
            //            средВремяОжидНаОстПоВремениИНаправл[номЧасПоявл].Add(пас.КодОстНазначения, времяПосадки - пас.ВремяПоявленияНаОстановке);
            //            колПасПоЧасИНаправл[номЧасПоявл].Add(пас.КодОстНазначения, 1);
            //        }
            //        else
            //        {
            //            средВремяОжидНаОстПоВремениИНаправл[номЧасПоявл].item(пас.КодОстНазначения) = ((int)средВремяОжидНаОстПоВремениИНаправл[номЧасПоявл].GetByIndex(пас.КодОстНазначения)) + времяПосадки - пас.ВремяПоявленияНаОстановке;
            //            колПасПоЧасИНаправл[номЧасПоявл].GetByIndex(пас.КодОстНазначения) = колПасПоЧасИНаправл[номЧасПоявл].GetByIndex(пас.КодОстНазначения) + 1;
            //        }
            //    }
            //    else //время появления и посадки в разные часы
            //        for (i = номЧасПоявл;i<=номЧасПосадки;i++)
            //        {//если в списке нет такой остановки назначения, то добавить
            //            if (средВремяОжидНаОстПоВремениИНаправл[i].ContainsKey(пас.КодОстНазначения) == false )
            //            {
            //                средВремяОжидНаОстПоВремениИНаправл[i].Add(пас.КодОстНазначения, 0);
            //                колПасПоЧасИНаправл[i].Add(пас.КодОстНазначения, 0);
            //            }
            //            if(i==номЧасПоявл)//час появления 
            //                    средВремяОжидНаОстПоВремениИНаправл[i].Item(пас.КодОстНазначения) += (номЧасПоявл + 1) * 60 - пас.ВремяПоявлНаОстановке;
            //            else if(i==номЧасПосадки )//час посадки 
            //                    средВремяОжидНаОстПоВремениИНаправл[i].Item(пас.КодОстНазначения) += времяПосадки - номЧасПосадки * 60;
            //            else//час не появления и не посадки 
            //                    средВремяОжидНаОстПоВремениИНаправл[i].Item(пас.КодОстНазначения) += 60;
            //            колПасПоЧасИНаправл[i].Item(пас.КодОстНазначения) += 1;
            //        }
            //    }

            //}
            ////усреднение времени ожидания на остановке
            //for( i = 0;i<колЧасов;i++)
            //    for (j = 0;j<средВремяОжидНаОстПоВремениИНаправл[i].Count;j++)
            //        средВремяОжидНаОстПоВремениИНаправл[i].SetByIndex(j, 
            //            средВремяОжидНаОстПоВремениИНаправл[i].GetByIndex(j) / 
            //            колПасПоЧасИНаправл[i].GetByIndex(средВремяОжидНаОстПоВремениИНаправл[i].GetKey(j)));
        }
    }
}