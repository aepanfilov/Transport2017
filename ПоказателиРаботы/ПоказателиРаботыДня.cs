using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Транспорт2017
{
    public class ПоказателиРаботыДня
    {
        public const int МАКСПассажирообрОстановок = 20;

        public int[] колВошедПоВремени;
        public ХаракПерегона[] максКолПасВАвтоПоВремени;
        public double[] пассажирокмПоВремени;
        public double[] срКолПасВАвтоВЧасПоВремени;
        public int срКолПеревезПасВЧас;
        public int сумКолПеревезПассаж;
        public int суммКолПоявившПассажиров;
        private Остановка[] пассажирообрОстановки;
        private Остановка[] пассажироНедождОстановки;

        public int суммЧислоРейсов;
        public int суммЧислоНезавершРейсов;
        public double коэфИспользВместим;
        public double срДальностьПоездкиКм;
        public double срДальностьПоездкиОст;
        public int СуммКолНедождПассажиров;
        public int СуммКолПересадочПассажиров;
        public int СуммКолПасОставшВАвто;
        public int СуммКолПасОставшНаОст;
        public int СуммКолОтпрПассажиров;
        public int Выручка { get; private set; }

        public Остановка ПассажирообрОстановка(int ind)
        { return пассажирообрОстановки[ind]; }
        public Остановка ПассажироНедождОстановка(int ind)
        { return пассажироНедождОстановки[ind]; }
        public void Инициализация()
        {
            коэфИспользВместим = 0;
            срДальностьПоездкиКм = 0;
            срДальностьПоездкиОст = 0;
            срКолПеревезПасВЧас = 0;
            сумКолПеревезПассаж = 0;
            суммКолПоявившПассажиров = 0;
        }
        public void РасчетПоказателей(Маршрут[] масМарш, Остановка[] масОст, List<Авто> масАвто, int колЧасРаботы)
        {
            int колЧасовСПоложПеревозкой = 0;
            ПоказателиРаботыМаршрута показРаботыМарш;

            суммЧислоРейсов = 0;
            колВошедПоВремени = new int[колЧасРаботы];
            пассажирокмПоВремени = new double[колЧасРаботы];
            срКолПасВАвтоВЧасПоВремени = new double[колЧасРаботы];
            максКолПасВАвтоПоВремени = new ХаракПерегона[колЧасРаботы];
            for (int i = 0; i < колЧасРаботы; i++)
                максКолПасВАвтоПоВремени[i] = new ХаракПерегона();

            int колМарш = масМарш.Length;
            for (int i = 0; i < колЧасРаботы; i++)
            {
                for (int j = 0; j < колМарш; j++)
                {
                    показРаботыМарш = масМарш[j].ПоказателиРаботы;
                    колВошедПоВремени[i] += показРаботыМарш.КолВошедПоВремени(i);
                    пассажирокмПоВремени[i] += показРаботыМарш.ПассажирокмПоВремени(i);
                    срКолПасВАвтоВЧасПоВремени[i] += показРаботыМарш.СрКолПасВАвтоВЧасПоВремени(i);
                    //максимальное количество пассажиров в автобусе на 1 перегон по времени
                    if (максКолПасВАвтоПоВремени[i].значение < показРаботыМарш.МаксКолПасВАвтоПоВремени(i).значение)
                        максКолПасВАвтоПоВремени[i] = показРаботыМарш.МаксКолПасВАвтоПоВремени(i);
                }
                if (колВошедПоВремени[i] > 0)
                    колЧасовСПоложПеревозкой++;
            }

            //цикл по маршрутам
            Выручка = 0;
            for (int i = 0; i < колМарш; i++)
            {
                показРаботыМарш = масМарш[i].ПоказателиРаботы;
                суммЧислоРейсов += показРаботыМарш.колВыполненРейсов;
                сумКолПеревезПассаж += показРаботыМарш.сумКолПеревезПассаж;
                срДальностьПоездкиКм += показРаботыМарш.срДальностьПоездкиКм;
                срДальностьПоездкиОст += показРаботыМарш.срДальностьПоездкиОст;
                коэфИспользВместим += показРаботыМарш.коэфИспользВместим;
                Выручка += показРаботыМарш.Выручка;
            }
            срДальностьПоездкиКм /= колМарш;
            срДальностьПоездкиОст /= колМарш;
            коэфИспользВместим /= колМарш;

            //цикл по остановкам
            int[] mascode = new int[МАКСПассажирообрОстановок + 1];
            int[] mascrit = new int[МАКСПассажирообрОстановок + 1];
            int[] mascode2 = new int[МАКСПассажирообрОстановок + 1];
            int[] mascrit2 = new int[МАКСПассажирообрОстановок + 1];
            int t;
            СуммКолНедождПассажиров = 0;
            СуммКолПересадочПассажиров = 0;
            for (int i = 0; i < масОст.Length; i++)
            {
                суммКолПоявившПассажиров += масОст[i].показателиРаботы.СуммКолПоявившПассажиров;
                СуммКолНедождПассажиров += масОст[i].показателиРаботы.СуммКолНедождПассажиров;
                СуммКолПересадочПассажиров += масОст[i].показателиРаботы.СуммКолПересадочПассажиров;
                СуммКолПасОставшНаОст += масОст[i].показателиРаботы.СуммКолПасОставшНаОст;
                СуммКолОтпрПассажиров += масОст[i].показателиРаботы.СуммКолОтпрПассажиров;
                //отбор первых пассажирообразующих остановок по отправлено+прибыло пассажирам
                mascode[МАКСПассажирообрОстановок] = i;
                mascrit[МАКСПассажирообрОстановок] = масОст[i].показателиРаботы.СуммКолОтпрПассажиров + масОст[i].показателиРаботы.СуммКолПрибПассажиров;
                for (int j = МАКСПассажирообрОстановок; j > 0; j--)
                {
                    if (mascrit[j] > mascrit[j - 1])
                    {
                        t = mascrit[j]; mascrit[j] = mascrit[j - 1]; mascrit[j - 1] = t;
                        t = mascode[j]; mascode[j] = mascode[j - 1]; mascode[j - 1] = t;
                    }
                    else
                        break;
                }
                //отбор первых пассажиронедождавшихся остановок по недождавш пассажирам
                mascode2[МАКСПассажирообрОстановок] = i;
                mascrit2[МАКСПассажирообрОстановок] = масОст[i].показателиРаботы.СуммКолНедождПассажиров;
                for (int j = МАКСПассажирообрОстановок; j > 0; j--)
                {
                    if (mascrit2[j] > mascrit2[j - 1])
                    {
                        t = mascrit2[j]; mascrit2[j] = mascrit2[j - 1]; mascrit2[j - 1] = t;
                        t = mascode2[j]; mascode2[j] = mascode2[j - 1]; mascode2[j - 1] = t;
                    }
                    else
                        break;
                }
            }
            //сформировать список пассажирообразующих остановок
            пассажирообрОстановки = new Остановка[МАКСПассажирообрОстановок];
            for (int i = 0; i < МАКСПассажирообрОстановок; i++)
                пассажирообрОстановки[i] = масОст[mascode[i]];
            //сформировать список пассажиронедождавшихся остановок
            пассажироНедождОстановки = new Остановка[МАКСПассажирообрОстановок];
            for (int i = 0; i < МАКСПассажирообрОстановок; i++)
                пассажироНедождОстановки[i] = масОст[mascode2[i]];

            //цикл по авто в пути
            СуммКолПасОставшВАвто = 0;
            суммЧислоНезавершРейсов = масАвто.Count;
            for (int i = 0; i < масАвто.Count; i++)
            {
                СуммКолПасОставшВАвто += масАвто[i].КолПас;
                сумКолПеревезПассаж += масАвто[i].показателиРаботы.сумКолПеревезПассаж;
                Выручка += масАвто[i].показателиРаботы.Выручка;
            }
            if (колЧасовСПоложПеревозкой > 0)
                срКолПеревезПасВЧас = сумКолПеревезПассаж / колЧасовСПоложПеревозкой;
        }
    }
}