using System;
using System.Collections.Generic;

namespace “ранспорт2017
{
    /// <summary>
    /// отвечает за действи€, происход€щие на отдельной остановке: 
    /// по€вление пассажиров, посадку пассажиров, имеет информацию 
    /// об автобусах сто€щих на остановке в текущем такте
    /// </summary>
    public class ќстановка
    {
        public static int ћј —¬рем€ќжидани€ѕасƒо”хода = 3000;//мин
        public static double ¬≈–ќя“Ќќ—“№ѕродолжени€ѕоездки = 1.0;//мин
        public const int ћј —¬рем€ќжидани€ѕасƒојвто—ѕересадкой = 0;//мин

        private static Random rnd=new Random();
        private List<јвто> массивјвто;
        private List<ѕассажир> массивѕассажиров;
        private √енераторѕассажиров генераторѕас;
        private ћатрица орреспонденций ћатрица орр;//ссылка на  ординатор.ћатрица орр

        public double  оэф¬ычеркивани€;
        public int  од;
        public string Ќазвание;
        private int  олћестƒл€јвто;
        public ѕоказатели–аботыќстановка показатели–аботы;

        public int  олѕас { get { return массивѕассажиров.Count; } }
        public ќстановка(int код_arg, string название_arg, int колћест_arg, ћатрица орреспонденций матр ор)
        {
             од = код_arg;
            Ќазвание = название_arg;
             олћестƒл€јвто = колћест_arg;
            массивјвто = new List<јвто>();
            массивѕассажиров = new List<ѕассажир>();
            показатели–аботы = new ѕоказатели–аботыќстановка( од);
            ћатрица орр = матр ор;
        }
        public void »нициализаци€()
        {
            
            if (массивјвто.Count > 0)
                массивјвто.Clear();
            if (массивѕассажиров.Count > 0)
                массивѕассажиров.Clear();
            показатели–аботы.»нициализаци€();
            генераторѕас.»нициализаци€();
            //if(коэф¬ычеркивани€>0)
            //коррекци€√енераторѕас( оэф¬ычеркивани€);
            генераторѕас. оррекци€√енераторѕас( оэф¬ычеркивани€);
        }
        public void ќтработать“акт(int тек“акт)
        {
            √енераци€ѕассажиров(тек“акт);
            ѕосадкаѕассажиров(тек“акт);
            ”ходѕассажиров(тек“акт);
            показатели–аботы.завершение“акта(массивѕассажиров, тек“акт);
        }
        private void √енераци€ѕассажиров(int тек“акт)
        {
            ѕассажир[] масѕас = генераторѕас.—генерировать(тек“акт).ToArray();
            foreach (ѕассажир пас in масѕас)
            {
                массивѕассажиров.Add(пас);
                показатели–аботы.по€влениеѕассажира(пас);
            }
        }
        private void ѕосадкаѕассажиров(int тек“акт)
        {
            int i, колѕас, колјвто;
            колѕас = массивѕассажиров.Count;
            колјвто = массивјвто.Count;
            if (колѕас == 0 || колјвто == 0)
                //некого или некуда сажать
                return;
            ѕассажир пас;
            bool next_pas;
            List<ѕуть орреспонденции> пути;
            int врем€ќж, колѕолнјвто;
            i = 0;
            while (i < массивѕассажиров.Count)
            {
                пас = массивѕассажиров[i];
                врем€ќж = тек“акт - пас.¬рем€ѕо€влени€Ќаќстановке;
                колѕолнјвто = 0;
                //получаем список достижимости с данной остановки до остановки назначени€
                пути = ћатрица орр.—писокѕутей( од, пас. одќстЌазначени€);
                next_pas = false;
                foreach (ѕуть орреспонденции путь in пути)
                {
                    if (путь.“ипѕути орресп == “ипѕути орреспонденцииEnum.безѕересадки ||
                        (путь.“ипѕути орресп == “ипѕути орреспонденцииEnum.сѕересадкой && пас. олѕересадок == 0 && врем€ќж >= ћј —¬рем€ќжидани€ѕасƒојвто—ѕересадкой))
                        //ищем  автобус и сажаем пассажира, иначе ждем на остановке
                        foreach (јвто авто in массивјвто)
                        {
                            if (авто. одћаршрута == путь. одћаршрута)
                                if (!авто.«аполнен)
                                {//сажаем пассажира в авто
                                    ѕосадкаѕассажира(пас, авто, тек“акт);
                                    i--;
                                    if (путь.“ипѕути орресп == “ипѕути орреспонденцииEnum.сѕересадкой)
                                        пас. одќстѕересадки = путь. одќстановкиѕересадки;
                                    // перейти к следующему пассажиру
                                    next_pas = true;
                                    break;
                                }
                                else
                                    колѕолнјвто++;
                        }
                    if (next_pas)
                        break;
                }
                i++;
                пас. олѕропущенныхѕолных“— += колѕолнјвто;
            }
        }
        //добавить новый авто в массив "массивјвто"
        public bool ѕриездјвто(јвто авто_arg)
        {
            //проверка на наличие мест дл€ нового авто
            if (массивјвто.Count <  олћестƒл€јвто)
            {//место есть - разрешаем остановку
                массивјвто.Add(авто_arg);
                показатели–аботы.приездјвто(авто_arg, массивјвто);
                return true;
            }
            else
                //остановка не разрешена
                return false;
        }

        //посадка отдельного пассажира в заданный авто
        private void ѕосадкаѕассажира(ѕассажир пас, јвто авто_arg, int тек“акт)
        {
            пас.начатьѕоездку(тек“акт);
            массивѕассажиров.Remove(пас);
            показатели–аботы.посадкаѕассажира(пас);
            авто_arg.ƒобавитьѕассажира(пас);
        }
        //вызываетс€ координатором при отправлении авто
        public void ќтправлениејвто(јвто авто_arg)
        { массивјвто.Remove(авто_arg); }
        //вызываетс€ координатором при высадке конкретного пассажира, дл€ увеличени€ счетчиков остановки
        public void ¬ысадкаѕассажира(ѕассажир пассажир_arg)
        {
            показатели–аботы.высадкаѕассажира(пассажир_arg);
            // если пассажир с пересадкой - создать нового пассажира
            if ( од == пассажир_arg. одќстѕересадки && пассажир_arg. одќстѕересадки != пассажир_arg. одќстЌазначени€)
            {
                if (rnd.NextDouble() <= ¬≈–ќя“Ќќ—“№ѕродолжени€ѕоездки)
                {
                    ѕассажир пас = new ѕассажир(пассажир_arg.¬рем€ѕриезда,  од, пассажир_arg. одќстЌазначени€, пассажир_arg. олѕересадок + 1);
                    массивѕассажиров.Add(пас);
                    показатели–аботы.по€влениеѕассажира(пас, пересадочный: true);
                }
            }
        }
        public void «адать√енераторѕас(√енераторѕассажиров генѕас)
        { генераторѕас = генѕас; }
        private void ”ходѕассажиров(int тек“акт)//уход пассажира, если он не дождалс€ автобуса за заданное врем€
        {
            int i = 0, врем€ќж;
            while (i < массивѕассажиров.Count)
            {
                врем€ќж = тек“акт - массивѕассажиров[i].¬рем€ѕо€влени€Ќаќстановке;
                if (врем€ќж > ћј —¬рем€ќжидани€ѕасƒо”хода)
                {
                    массивѕассажиров.RemoveAt(i);
                    показатели–аботы.—умм олЌедождѕассажиров++;
                    i--;
                }
                else if (врем€ќж < ћј —¬рем€ќжидани€ѕасƒо”хода)
                    break;
                i++;
            }
        }
        //public void коррекци€√енераторѕас(double коэф¬ычеркивани€)
        //{
        //    this. оэф¬ычеркивани€ = коэф¬ычеркивани€;
        //    генераторѕас.коррекци€√енераторѕас(коэф¬ычеркивани€); 
        //}
    }
}