using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using OfficeOpenXml;
using System.IO;

namespace Транспорт2017
{
    static class ПротоколExcel
    {
        const string XLSXFILENAME = "otchet.xlsx";
        private static int номерСтр;
        private static ExcelPackage ExcelApp;
        private static ExcelWorkbook workbook;
        private static ExcelWorksheet worksheet;
        private static string fname;

        public static bool ОткрытьФайл(out string errMsg)
        {
            errMsg = string.Empty;
            fname = System.Windows.Forms.Application.StartupPath + "\\" + XLSXFILENAME;
            FileInfo newFile = new FileInfo(fname);
            if (newFile.Exists)
            {
                try
                {
                    newFile.Delete();
                    newFile = new FileInfo(fname);
                }
                catch (IOException exc)
                {
                    errMsg = string.Format("Ошибка при создании файла \"{0}\":\n{1}", Path.GetFileName(fname), exc.Message);
                    return false;
                }
            }
            ExcelApp = new ExcelPackage(newFile);
            //добавить новую книгу
            workbook = ExcelApp.Workbook;
            номерСтр = 1;
            return true;
        }

        public static void ЗакрытьФайл()
        {
            ExcelApp.Save();
            ExcelApp.Dispose();
        }

        //записать данные в очередную строку текущего листа
        public static void Записать(params object[] mas)
        {
            if (worksheet != null && mas.Length > 0)
                for (int i = 0; i < mas.Length; i++)
                    worksheet.Cells[номерСтр, i + 1].Value = mas[i];
            номерСтр++;
        }
        public static void Записать2(int _номерСтр, int начНомерСтб, params object[] mas)
        {
            if (worksheet != null && mas.Length > 0)
                for (int i = 0; i < mas.Length; i++)
                    worksheet.Cells[_номерСтр, i + начНомерСтб].Value = mas[i];
            //номерСтр++;
        }
        public static void ПропуститьСтроку()//записать данные в очереную строку текущего листа
        { номерСтр++; }
        public static void ДобавитьЛист(string имя)
        {
            if (workbook != null)
            {
                worksheet = workbook.Worksheets.Add(имя);
                номерСтр = 1;
            }
        }
        public static void ПереместитьЛист(string имя, int новПозиция)
        {
            if (workbook != null && workbook.Worksheets[имя] != null)
                workbook.Worksheets.MoveBefore(workbook.Worksheets[имя].Index, новПозиция);
        }

        public static void Показать()
        { System.Diagnostics.Process.Start(fname); }

        public static void ЗаписатьАвто(Авто auto)
        {
            if (auto.показателиРаботы != null)
            {
                //auto.показателиРаботы
                ПропуститьСтроку();
                Записать("Данные по авто " + auto.код, "маршрут №", auto.НазваниеМаршрута);
                Записать("время начала рейса", auto.показателиРаботы.времяПриездаНаОст[0], "время окончания рейса", auto.показателиРаботы.времяОкончРейса);
                Записать("вместимость", auto.МаксВместимость);
                Записать("коэф использов вместимости", auto.показателиРаботы.коэфИспользВместим);
                Записать("сум время ожид перед ост", auto.показателиРаботы.сумВремяОжидПередОст);
                Записать("сум кол перевез пас", auto.показателиРаботы.сумКолПеревезПассаж);
                Записать("остат кол пас в авто", auto.КолПас);
                Записать("№ остановки", "время", "кол вошедших", "кол вышедших", "кол в авто");

                int i;
                for (i = 0; i < auto.показателиРаботы.КолОстановок - 1; i++)
                    Записать(new object[]{i + 1, auto.показателиРаботы.времяПриездаНаОст[i], auto.показателиРаботы.колВошедПоОст[i], 
                    auto.показателиРаботы.колВышедПоОст[i], auto.показателиРаботы.колПасПоПерегонам[i]});
                i = auto.показателиРаботы.КолОстановок - 1;
                Записать(new object[]{i + 1, auto.показателиРаботы.времяПриездаНаОст[i], auto.показателиРаботы.колВошедПоОст[i], 
                auto.показателиРаботы.колВышедПоОст[i], 0});
            }
        }
        public static void ЗаписатьОстановку(ПоказателиРаботыОстановка pkOst, string НазваниеОст)
        {
            if (pkOst != null)
            {
                ПропуститьСтроку();
                Записать("Данные по остановке ", "код", pkOst.КодОстановки, НазваниеОст);
                Записать("кол появ пас", pkOst.СуммКолПоявившПассажиров);
                Записать("кол отправ пас", pkOst.СуммКолОтпрПассажиров);
                Записать("кол недождавш пас", pkOst.СуммКолНедождПассажиров);
                Записать("кол оставшихся пас", pkOst.СуммКолПасОставшНаОст);
                Записать("макс кол авто", pkOst.МаксКолАвтоНаОст);
                Записать("макс кол ожид пас", pkOst.МаксКолОжидПассжиров);
                Записать("сред время ожид пас", pkOst.СредВремяОжидНаОст);
                Записать("кол приб пас", pkOst.СуммКолПрибПассажиров);

                //int kolHours, maxList;
                //запись среднего времени ожидания пассажиров по часам и остановкам назначения
                //Записать( "среднее время ожидания пассажиров по часам и остановкам назначения" });
                //kolHours = pkOst.КолЧасов;
                //            Dim mas(0 To 2 * kolHours - 1) As Object
                //            for i = 0 To kolHours - 1
                //                mas(2 * i) = i.ToString + "-" + (i + 1).ToString + ", остановки назначения"
                //                mas(2 * i + 1) = i.ToString + "-" + (i + 1).ToString + ", ср ожидание"
                //                if maxList < pkOst.средВремяОжидНаОстПоВремениИНаправл(i).Count )
                //                    maxList = pkOst.средВремяОжидНаОстПоВремениИНаправл(i).Count
                //                }
                //            Next i
                //            ПротоколExcel.записать(mas)
                //            //добавляем строки
                //            for i = 0 To maxList - 1
                //                //очистить массив
                //                Array.Clear(mas, 0, mas.Length)
                //                //формируем очередную строку
                //                for j = 0 To kolHours - 1
                //                    if i < pkOst.средВремяОжидНаОстПоВремениИНаправл(j).Count )
                //                        mas(2 * j) = pkOst.средВремяОжидНаОстПоВремениИНаправл(j).GetKey(i)
                //                        mas(2 * j + 1) = pkOst.средВремяОжидНаОстПоВремениИНаправл(j).GetByIndex(i)
                //                    }
                //                Next j
                //                ПротоколExcel.записать(mas)
                //            Next i
            }
        }
        public static void ЗаписатьМаршрут(Маршрут marsh)
        {
            int i;
            //    Dim q1, q2, q3 As Double
            if (marsh != null)
            {
                ПоказателиРаботыМаршрута pkm = marsh.ПоказателиРаботы;
                ПропуститьСтроку();
                Записать("Данные по маршруту");
                Записать("код:", marsh.Код, "тип:", marsh.СокращениеТипаТС);
                Записать("название:", marsh.Название);
                //Записать("макс вместимость ТС", marsh.)
                Записать("выполнено рейсов", pkm.колВыполненРейсов);
                Записать("коэффициент использования вместимости", pkm.коэфИспользВместим);
                Записать("макс кол пас на перегон", pkm.максКолПасВАвтоНаПерегон.значение);
                Записать("перегон с макс кол пас в авто", pkm.максКолПасВАвтоНаПерегон.номерПерегона);
                Записать("кол перевезенных пас ", pkm.сумКолПеревезПассаж);
                Записать("ср кол перевезенных пас в час", pkm.срКолПеревезПасВЧас);
                Записать("выручка по заверш рейсам", pkm.Выручка);
                //Характеристики по времени
                ПропуститьСтроку();
                Записать("Характеристики по времени");
                Записать("№ часа", "кол вошедших", "макс кол пас в авто", "перегон с макс кол пас в авто", "пас*км", "ср кол пас в авто в час");
                for (i = 0; i < pkm.КолЧасов; i++)
                    Записать(i + 1,
                    pkm.КолВошедПоВремени(i),
                    pkm.МаксКолПасВАвтоПоВремени(i).значение,
                    pkm.МаксКолПасВАвтоПоВремени(i).номерПерегона,
                    pkm.ПассажирокмПоВремени(i),
                    pkm.СрКолПасВАвтоВЧасПоВремени(i));
                //характеристики по остановкам (перегонам)
                ПропуститьСтроку();
                Записать("Характеристики по остановкам (перегонам)");
                Записать("ср длина перегона", pkm.срДлинаПерегона);
                Записать("ср кол пас на перегон", pkm.срКолПасВАвтоНаПерегон);
                Записать("ср дальность поездки, км", pkm.срДальностьПоездкиКм);
                Записать("ср дальность поездки, ост", pkm.срДальностьПоездкиОст);
                Записать("№ остановки", "кол вошедших", "ср кол пас в авто на перегон");
                for (i = 0; i < pkm.КолОстановок - 1; i++)
                    Записать(i + 1, pkm.КолВошедПоОстановкам(i), pkm.СрКолПасВАвтоПоПерегонам(i));
                i = pkm.КолОстановок - 1;
                Записать(i + 1, pkm.КолВошедПоОстановкам(i), 0);
                //характеристики по рейсам
                ПропуститьСтроку();
                Записать("Характеристики по рейсам");
                if (marsh.архивАвто.Count > 0)
                    Записать("время начала первого рейса", marsh.архивАвто[0].времяОтпрВРейс);
                else
                    Записать("время начала первого рейса", "-");
                Записать("время завершения последнего рейса", pkm.времяОкончПоследРейса);
                Записать("№ рейса", "время отправления", "кол вошедших");
                for (i = 0; i < marsh.архивАвто.Count; i++)
                    Записать(i + 1, marsh.архивАвто[i].времяОтпрВРейс, pkm.КолВошедПоРейсам(i));
            }
        }

        //записать данные повсему дню
        public static void ЗаписатьДень(ПоказателиРаботыДня pkday, int КолЧасов)
        {
            int i;
            // Dim q1, q2, q3 As Double
            if (pkday != null)
            {
                //With pkday
                ПропуститьСтроку();
                Записать("Данные по 1 дню (все маршруты)");
                Записать("сумм число заверш рейсов", pkday.суммЧислоРейсов);
                Записать("сумм число рейсов в пути", pkday.суммЧислоНезавершРейсов);
                Записать("сумм кол появивш пассажиров", pkday.суммКолПоявившПассажиров);
                Записать("сумм кол перевез пассажиров", pkday.сумКолПеревезПассаж);
                Записать("сум кол недождавш пассажиров", pkday.СуммКолНедождПассажиров);
                Записать("сум кол пас оставш на остановках", pkday.СуммКолПасОставшНаОст);
                Записать("сум кол пас оставш в авто", pkday.СуммКолПасОставшВАвто);
                Записать("сум кол пересадочных пассажиров", pkday.СуммКолПересадочПассажиров);
                Записать("ср кол перевез пас в час", pkday.срКолПеревезПасВЧас);
                Записать("ср коэф использования вместимости", pkday.коэфИспользВместим);
                Записать("ср дальность поездки в км", pkday.срДальностьПоездкиКм);
                Записать("ср дальность поездки в остановках", pkday.срДальностьПоездкиОст);
                Записать("выручка, руб", pkday.Выручка);

                //Характеристики по времени
                ПропуститьСтроку();
                Записать("Характеристики по времени");
                Записать("№ часа", "кол вошедших", "макс кол пас в авто", "пас*км", "ср кол пас в авто в час");
                for (i = 0; i < КолЧасов; i++)
                    Записать(i + 1, pkday.колВошедПоВремени[i], pkday.максКолПасВАвтоПоВремени[i].значение,
                        pkday.пассажирокмПоВремени[i], pkday.срКолПасВАвтоВЧасПоВремени[i]);

                //Характеристики по остановкам
                ПропуститьСтроку();
                Записать("Пассажирообразующие остановки");
                Записать("код", "название", "общее кол пас", "кол отправл пас", "кол прибывш пас");
                //int n = ПоказателиРаботыДня.МАКСПассажирообрОстановок;
                //Dim ost As Остановка
                for (i = 0; i < ПоказателиРаботыДня.МАКСПассажирообрОстановок; i++)
                {
                    Остановка ost = pkday.ПассажирообрОстановка(i);
                    Записать(ost.Код, ost.Название, ost.показателиРаботы.СуммКолОтпрПассажиров +
                        ost.показателиРаботы.СуммКолПрибПассажиров, ost.показателиРаботы.СуммКолОтпрПассажиров,
                        ost.показателиРаботы.СуммКолПрибПассажиров);
                }

                ПропуститьСтроку();
                Записать("Пассажиронедождавшиеся остановки");
                Записать("код", "название", "кол недожд пас", "кол появивш пас");
                for (i = 0; i < ПоказателиРаботыДня.МАКСПассажирообрОстановок; i++)
                {
                    Остановка ost = pkday.ПассажироНедождОстановка(i);
                    Записать(ost.Код, ost.Название, ost.показателиРаботы.СуммКолНедождПассажиров, ost.показателиРаботы.СуммКолПоявившПассажиров);
                }
                //            //характеристики по остановкам (перегонам)
                //            ПротоколExcel_пропуститьСтроку
                //            Записать("Характеристики по остановкам (перегонам)")
                //            Записать("ср длина перегона", .СрДлинаПерегона)
                //            Записать("ср кол пас на перегон", .СрКолПасВАвтоНаПерегон)
                //            Записать("ср дальность поездки, км", .СрДальностьПоездкиКм)
                //            Записать("ср дальность поездки, ост", .СрДальностьПоездкиОст)
                //            Записать("№ остановки", "кол вошедших", "ср кол пас в авто на перегон")
                //            Dim sumpas As Long: sumpas = 0
                //            for i = 0 To .КолОстановок - 1

                //                if( i < .КолОстановок - 1 )
                //                    q3 = .СрКолПасВАвтоПоПерегонам(i, ТипПасДляПоказатРаботы.Общее)
                //                Else
                //                    q3 = 0
                //                 if(
                //                Записать(i + 1, .КолВошедПоОстановкам(i, ТипПасДляПоказатРаботы.Общее), q3)
                //            Next i
                //            //характеристики по рейсам
                //            ПротоколExcel_пропуститьСтроку
                //            Записать("Характеристики по рейсам")
                //            if( marsh.архивАвто.count > 0 )
                //                Записать("время начала первого рейса", marsh.архивАвто(0).ВремяОтпрВРейс)
                //            Else
                //                Записать("время начала первого рейса", "-")
                //             if(
                //            Записать("время завершения последнего рейса", .ВремяОкончПоследРейса)
                //            Записать("№ рейса", "время отправления", "кол вошедших")
                //            for i = 0 To marsh.архивАвто.count - 1
                //                Записать(i + 1, marsh.архивАвто(i).ВремяОтпрВРейс, _
                //                    .КолВошедПоРейсам(i, ТипПасДляПоказатРаботы.Общее))
                //            Next i
            }
        }
        //public static void ЗаписатьПас(List<Пассажир> listPas)
        //{
        //    ПропуститьСтроку();
        //    Записать("Код", "ост отправ", "ост пересадки", "ост назнач", "время появл", "время посадки",
        //            "время приезда", "код маршрута", "кол пересадок", "число полных ТС");
        //    foreach (Пассажир pas in listPas)
        //        Записать(pas.Код, pas.КодОстОтправления, pas.КодОстПересадки, pas.КодОстНазначения,
        //            pas.ВремяПоявленияНаОстановке, pas.ВремяПосадки, pas.ВремяПриезда, pas.КодМаршрута, pas.КолПересадок, pas.КолПропущенныхПолныхТС);
        //}
        //записать данные про пассажиров
        public static void ЗаписатьПас(List<Пассажир> listPas)
        {
            if (listPas.Count < 1000000)
            {
                ПропуститьСтроку();
                Записать("Код", "ост отправ", "ост пересадки", "ост назнач", "время появл", "время посадки",
                        "время приезда", "код маршрута", "кол пересадок", "число полных ТС");
                foreach (Пассажир pas in listPas)
                    Записать(pas.Код, pas.КодОстОтправления, pas.КодОстПересадки, pas.КодОстНазначения,
                        pas.ВремяПоявленияНаОстановке, pas.ВремяПосадки, pas.ВремяПриезда, pas.КодМаршрута, pas.КолПересадок, pas.КолПропущенныхПолныхТС);
            }
            else
            {
                int countM = listPas.Count / 1000000;
                int count = listPas.Count % 1000000;
                int row = 2, col = 1;
                //запись миллионов пассажиров
                for (int i = 0; i < countM; i++)
                {
                    Записать2(row++, col, "Код", "ост отправ", "ост пересадки", "ост назнач", "время появл", "время посадки",
                        "время приезда", "код маршрута", "кол пересадок", "число полных ТС");
                    for (int j = 0; j < 1000000; j++)
                    {
                        Пассажир pas = listPas[i * 1000000 + j];
                        Записать2(row++, col, pas.Код, pas.КодОстОтправления, pas.КодОстПересадки, pas.КодОстНазначения,
                            pas.ВремяПоявленияНаОстановке, pas.ВремяПосадки, pas.ВремяПриезда, pas.КодМаршрута, pas.КолПересадок, pas.КолПропущенныхПолныхТС);
                    }
                    row = 2;
                    col += 10;
                }
                //запись остатков пассажиров
                countM *= 1000000;
                Записать2(row++, col, "Код", "ост отправ", "ост пересадки", "ост назнач", "время появл", "время посадки",
                    "время приезда", "код маршрута", "кол пересадок", "число полных ТС");
                for (int i = 0; i < count; i++)
                {
                    Пассажир pas = listPas[countM + i];
                    Записать2(row++, col, pas.Код, pas.КодОстОтправления, pas.КодОстПересадки, pas.КодОстНазначения,
                        pas.ВремяПоявленияНаОстановке, pas.ВремяПосадки, pas.ВремяПриезда, pas.КодМаршрута, pas.КолПересадок, pas.КолПропущенныхПолныхТС);
                }
            }
        }
        //записать данные про авто-рейсы
        public static void ЗаписатьАвтоРейсы(List<List<Авто>> listAutoByMarsh, List<Авто> listAutoInPath)
        {
            int i;
            int[] codeost;
            ПропуститьСтроку();
            Записать("код", "код маршр", "номер ост", "код ост", "время приб", "кол вышед", "кол вошед", "кол в авто");
            foreach (List<Авто> marsh in listAutoByMarsh)
            {
                foreach (Авто auto in marsh)
                {
                    codeost = auto.маршрут.КодыОстановок;//???
                    for (i = 0; i < auto.показателиРаботы.КолОстановок - 1; i++)
                        Записать(auto.код, auto.КодМаршрута, i, codeost[i], auto.показателиРаботы.времяПриездаНаОст[i],
                            auto.показателиРаботы.колВышедПоОст[i], auto.показателиРаботы.колВошедПоОст[i], auto.показателиРаботы.колПасПоПерегонам[i]);
                    i = auto.показателиРаботы.КолОстановок - 1;
                    Записать(auto.код, auto.КодМаршрута, i, codeost[i], auto.показателиРаботы.времяПриездаНаОст[i],
                        auto.показателиРаботы.колВышедПоОст[i], auto.показателиРаботы.колВошедПоОст[i], 0);
                }
            }

            foreach (Авто auto in listAutoInPath)
            {
                codeost = auto.маршрут.КодыОстановок;
                for (i = 0; i < auto.показателиРаботы.КолОстановок - 1; i++)
                    Записать(auto.код, auto.КодМаршрута, i, codeost[i], auto.показателиРаботы.времяПриездаНаОст[i],
                        auto.показателиРаботы.колВышедПоОст[i], auto.показателиРаботы.колВошедПоОст[i], auto.показателиРаботы.колПасПоПерегонам[i]);
                i = auto.показателиРаботы.КолОстановок - 1;
                Записать(auto.код, auto.КодМаршрута, i, codeost[i], auto.показателиРаботы.времяПриездаНаОст[i],
                    auto.показателиРаботы.колВышедПоОст[i], auto.показателиРаботы.колВошедПоОст[i], 0);
            }
        }
        public static void ЗаписатьВсеОстановки(Остановка[] массивОстановок)
        {
            ПротоколExcel.ПропуститьСтроку();
            ПротоколExcel.Записать("Данные по всем остановкам");
            ПротоколExcel.Записать("код", "Название", "кол появ пас", "кол отправ пас", "кол недождавш пас", "кол оставшихся пас",
                "макс кол авто", "макс кол ожид пас", "сред время ожид пас", "кол приб пас");
            for (int i = 0; i < массивОстановок.Length; i++)
                ПротоколExcel.Записать(массивОстановок[i].показателиРаботы.КодОстановки,
                    массивОстановок[i].Название,
                    массивОстановок[i].показателиРаботы.СуммКолПоявившПассажиров,
                    массивОстановок[i].показателиРаботы.СуммКолОтпрПассажиров,
                    массивОстановок[i].показателиРаботы.СуммКолНедождПассажиров,
                    массивОстановок[i].показателиРаботы.СуммКолПасОставшНаОст,
                    массивОстановок[i].показателиРаботы.МаксКолАвтоНаОст,
                    массивОстановок[i].показателиРаботы.МаксКолОжидПассжиров,
                    массивОстановок[i].показателиРаботы.СредВремяОжидНаОст,
                    массивОстановок[i].показателиРаботы.СуммКолПрибПассажиров);
        }
        public static void ЗаписатьТаблМаршрут(Маршрут[] массивМаршрутов)
        {
            ПротоколExcel.ПропуститьСтроку();
            ПротоколExcel.Записать("Данные по рейсам маршрутов");
            ПротоколExcel.Записать("код маршрута", "Номер маршрута", "кол рейсов", "макс вместимость 1 ТС", "макс перевез за 1 рейс",
                "макс Коэф Исп Вмест за 1 рейс", "Коэф Исп Вмест по маршруту", "кол ТС на маршруте", "время 1 рейса", "тип ТС",
                "кол перевезенных", "выручка");
            foreach (Маршрут marsh in массивМаршрутов)
                ПротоколExcel.Записать(marsh.Код,
                   marsh.Название,
                   marsh.ПоказателиРаботы.колВыполненРейсов,
                   marsh.Вместимость1Рейса,
                   marsh.ПоказателиРаботы.МаксКолВошедЗа1Рейс,
                   marsh.ПоказателиРаботы.МаксКоэфИсполВмесЗа1Рейс,
                   marsh.ПоказателиРаботы.коэфИспользВместим,
                   marsh.ЧислоТСнаМаршруте,
                   marsh.Время1Рейса,
                   marsh.СокращениеТипаТС,
                   marsh.ПоказателиРаботы.сумКолПеревезПассаж,
                   marsh.ПоказателиРаботы.Выручка);
        }

        internal static void ЗаписатьРаспределениеТС(Маршрут[] массивМаршрутов)
        {
            ПротоколExcel.ПропуститьСтроку();
            ПротоколExcel.Записать("Распределение ТС");//, null, null, null, null, null, "Количество автотранспортных средств в одном направлении, ед.");
            ПротоколExcel.Записать("код маршрута", "Название маршрута", "Номер маршрута", "кол ТС", "Интервал движения, мин", "Оценка среднечасового числа входящих пассажиров, чел/ТС",
                "Оценка дохода на 1 ТС, руб/час");
            string[] masstr;
            string strCode = "", curCode = "", prevCode = "", nameMarsh = "";
            int срчасКолПеревезПасНа1ТС = 0, доходНа1ТСвЧас = 0, числоТСнаМаршруте = 0, интДвижения = 0;
            foreach (Маршрут marsh in массивМаршрутов)
            {
                prevCode = curCode;
                //определение номера маршрута - объединить прямой и обратный
                masstr = marsh.Название.Split(new char[] { ' ' }, 2);
                curCode = masstr[0];
                //nameMarsh = masstr[1].Split(new char[] { '(' }, 2)[0];
                if (prevCode == curCode)
                {
                    strCode += "," + marsh.Код;
                    срчасКолПеревезПасНа1ТС += marsh.ПоказателиРаботы.срчасКолПеревезПасНа1ТС;
                    доходНа1ТСвЧас += marsh.ПоказателиРаботы.доходНа1ТСвЧас;
                }
                else
                {
                    if (prevCode != "")
                        //записать предыдущий маршрут
                        ПротоколExcel.Записать(strCode,
                           nameMarsh,
                           "№ " + prevCode,
                           числоТСнаМаршруте,
                           интДвижения,
                           срчасКолПеревезПасНа1ТС,
                           доходНа1ТСвЧас);

                    strCode = marsh.Код.ToString();
                    //nameMarsh = marsh.Название;
                    nameMarsh = masstr[1].Split(new char[] { '(' }, 2)[0];
                    числоТСнаМаршруте = marsh.ЧислоТСнаМаршруте;
                    интДвижения = (int)Math.Round(marsh.Время1Рейса * 2.0 / marsh.ЧислоТСнаМаршруте);
                    срчасКолПеревезПасНа1ТС = marsh.ПоказателиРаботы.срчасКолПеревезПасНа1ТС;
                    доходНа1ТСвЧас = marsh.ПоказателиРаботы.доходНа1ТСвЧас;
                }
            }
            //записать последний маршрут
            ПротоколExcel.Записать(strCode,
               nameMarsh,
               "№ " + prevCode,
               числоТСнаМаршруте,
               интДвижения,
               срчасКолПеревезПасНа1ТС,
               доходНа1ТСвЧас);
        }

        internal static void ЗаписатьТроллейбусы(List<ТроллейбусыДляПротокола> listTrol, Маршрут[] masTrol)
        {
            int cnt = masTrol.Length;
            ПротоколExcel.ПропуститьСтроку();
            ПротоколExcel.Записать("Результаты тестирования  частоты движения троллейбусов");
            object[] mas = new object[4 * cnt + 2];
            mas[0] = "Интервалы движения, мин.";
            mas[cnt] = "Число ТС на маршруте, шт.";
            mas[2 * cnt] = "Суммарный километраж всех рейсов маршрута, км.";
            mas[3 * cnt] = "Перевезено пас по маршрутам, пас.";
            ПротоколExcel.Записать(mas);
            string[] mascode = (from m in masTrol select m.Название).ToArray<string>();
            Array.Copy(mascode, 0, mas, 0, cnt);
            Array.Copy(mascode, 0, mas, cnt, cnt);
            Array.Copy(mascode, 0, mas, 2 * cnt, cnt);
            Array.Copy(mascode, 0, mas, 3 * cnt, cnt);
            mas[4 * cnt] = "Всего пас по всем троллейбусам";
            mas[4 * cnt + 1] = "Выручка по всем троллейбусам, руб.";
            ПротоколExcel.Записать(mas);

            foreach (ТроллейбусыДляПротокола item in listTrol)
            {
                Array.Copy(item.IntervalsTroll, 0, mas, 0, cnt);
                Array.Copy(item.CountTCTroll, 0, mas, cnt, cnt);
                Array.Copy(item.AllTrollKm, 0, mas, 2 * cnt, cnt);
                Array.Copy(item.PassTroll, 0, mas, 3 * cnt, cnt);
                mas[4 * cnt] = item.AllTrollPass;
                mas[4 * cnt + 1] = item.AllTrollProfit;
                ПротоколExcel.Записать(mas);
            }
        }
    }
}