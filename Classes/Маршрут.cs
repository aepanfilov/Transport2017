using System.Collections.Generic;
using System;
using System.Linq;

namespace “ранспорт2017
{
    /// <summary>
    /// отвечает за последовательность остановок отдельного маршрута, 
    /// времени движени€ между остановками, расписани€ отправлени€ 
    /// автобусов по маршруту
    /// </summary>
    public class ћаршрут
    {
        int[] массив одовќстановок;
        double[] массивƒлинѕерегонов;
        int[] массив»нтерваловћдќст;
        int индекс—лед–ейса;//индекс следующего рейса дл€ массивов "массив¬ремениќтпр" и "массив¬местимостей"
        –ейс[] массив–ейсов;

        public “ип“ранспортаћаршрутаEnum “ип“ранспорта;        
        public int  од;
        public string Ќазвание;
        public ѕоказатели–аботыћаршрута ѕоказатели–аботы;
        public List<јвто> архивјвто;
        public int „исло“—наћаршруте;
        public int ¬рем€1–ейса;
        public int —тоимостьѕроезда;
        //public Dictionary<int, int> „исло“—ѕо¬местимост€м; //key=вместимость, value= количество “—
        public double ƒлинаћаршрута { get; protected set; }

        public static event EventHandler<IntEventArg> —обытиеЌачать–ейс;
        public int  онечќстановка { get { return массив одовќстановок[массив одовќстановок.Length - 1]; } }
        public int Ќачќстановка { get { return массив одовќстановок[0]; } }
        public int[]  одыќстановок { get { return массив одовќстановок; } }
        public int ¬рем€—ледующего–ейса { get { return массив–ейсов != null ? (индекс—лед–ейса < массив–ейсов.Length ? массив–ейсов[индекс—лед–ейса].врем€ќтправлени€ : -1) : -1; } }
        public int ¬местимость—лед–ейса { get { return массив–ейсов != null ? (индекс—лед–ейса < массив–ейсов.Length ? массив–ейсов[индекс—лед–ейса].ћакс¬местимость : -1) : -1; } }
        public int ¬местимость1–ейса { get { return массив–ейсов != null ? массив–ейсов[0].ћакс¬местимость : 0; } }

        public int  оличќстановок { get { return массив одовќстановок.Length; } }
        //public int[]  одыќстановок { get { return массив одовќстановок; } }
        public string —окращение“ипа“—
        {
            get
            {
                switch (“ип“ранспорта)
                {
                    case “ип“ранспортаћаршрутаEnum.автобус:
                        return "автобус";
                    case “ип“ранспортаћаршрутаEnum.троллейбус:
                        return "троллейбус";
                    case “ип“ранспортаћаршрутаEnum.трамвай:
                        return "трамвай";
                    case “ип“ранспортаћаршрутаEnum.маршрутка:
                        return "маршрутка";
                    default: return "???";
                }
            }
        }
        public ћаршрут(int код_arg, string название_arg, “ип“ранспортаћаршрутаEnum тип“ранс, int стоимѕроезд, int[] мас одќст, int[] мас»нтерв, –ейс[] мас–ейс, double[] масƒлин)
        {
             од = код_arg;
            Ќазвание = название_arg;
            “ип“ранспорта = тип“ранс;
            —тоимостьѕроезда = стоимѕроезд;
            массив одовќстановок = мас одќст;
            массив»нтерваловћдќст = мас»нтерв;
            массив–ейсов = мас–ейс;
            массивƒлинѕерегонов = масƒлин;
            ѕоказатели–аботы = new ѕоказатели–аботыћаршрута(this);

            //„исло“—ѕо¬местимост€м = new Dictionary<int, int>();
            //foreach (–ейс рейс in массив–ейсов)
            //{
            //    if („исло“—ѕо¬местимост€м.ContainsKey(рейс.ћакс¬местимость))
            //        „исло“—ѕо¬местимост€м[рейс.ћакс¬местимость]++;
            //    else
            //        „исло“—ѕо¬местимост€м.Add(рейс.ћакс¬местимость, 1);
            //}
            ƒлинаћаршрута = массивƒлинѕерегонов.Sum();
        }
        public ћаршрут(int код_arg, string название_arg, “ип“ранспортаћаршрутаEnum тип“ранс, int стоимѕроезд,ѕерегон[] масѕерегон, –ейс[] мас–ейс):
            this(код_arg,  название_arg, тип“ранс,стоимѕроезд,
            (from s in масѕерегон select s.codeOst).ToArray<int>(),
            (from s in масѕерегон select s.timeInt).ToArray<int>(),мас–ейс,
            (from s in масѕерегон select s.length).ToArray<double>())
        { }

        public void »нициализаци€()
        {
            индекс—лед–ейса = 0;
            ѕоказатели–аботы.»нициализаци€();
        }
        public void «адатьћассив–ейсов(–ейс[] мас–ейс)
        { массив–ейсов = мас–ейс; }
        public double ƒлинаѕерегона(int ind)
        {
            return массивƒлинѕерегонов[ind];
        }
        public int —ледќстановкаѕо оду(int код“екќст)
        {
            for (int i = 0; i < массив одовќстановок.Length; i++)
                if (массив одовќстановок[i] == код“екќст)
                {   //i - текуща€ остановка
                    //если текуща€ остановка = последн€€, то вернуть тот же код остановки
                    return i < массив одовќстановок.Length - 1 ? массив одовќстановок[i + 1] : код“екќст;
                }
            return -1;
        }
        public int —ледќстановкаѕоЌомеру(int номер“екќст)
        {
            if (номер“екќст < массив одовќстановок.Length - 1)
                return массив одовќстановок[номер“екќст + 1];
            else
                //если текуща€ остановка = последн€€, то вернуть код последней остановки
                return массив одовќстановок[массив одовќстановок.Length - 1];
        }
        public bool ƒостижимаќстановка(int код“екќст, int кодќстЌазнач)
        {
            for (int i = 0; i < массив одовќстановок.Length; i++)
                if (массив одовќстановок[i] == код“екќст)
                {// i - текуща€ остановка
                    for (int j = i + 1; j < массив одовќстановок.Length; j++)
                        if (массив одовќстановок[j] == кодќстЌазнач)
                            // j - остановка назначени€, -> достижима
                            return true;
                    // остановка назначени€ не найдена
                    return false;
                }
            return false;
        }
        public int ¬рем€ƒо—ледќстановки(int кодќст)
        {
            for (int i = 0; i < массив одовќстановок.Length; i++)
                if (массив одовќстановок[i] == кодќст)
                {
                    //// i - текуща€ остановка
                    //if (i < массив одовќстановок.Length - 1)
                        return массив»нтерваловћдќст[i];
                    //else
                    //    ////если текуща€ остановка = последн€€, то вернуть 0
                    //    return 0;
                }
            return 0;
        }
        public void ќтработать“акт(int тек“акт)
        {//проверка на начало нового рейса
            if (¬рем€—ледующего–ейса == тек“акт)
            {
                —обытиеЌачать–ейс?.Invoke(this, new IntEventArg(тек“акт));
                //зафиксировать отправление очередного рейса
                if (индекс—лед–ейса < массив–ейсов.Length)
                    индекс—лед–ейса++;
            }
        }
    }
}