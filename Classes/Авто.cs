using System.Collections.Generic;
using System;

namespace Транспорт2017
{
    /// <summary>
    /// отвечает за движение и состояние отдельного автобуса на маршруте
    /// </summary>
    public class Авто
    {
        int номерСледОстановки;
        int времяДоСменыСостояния;
        int кодСледОстановки;
        List<Пассажир> массивПассажиров;

        public Маршрут маршрут;
        public string код;////после отладки удалить
        public СостояниеАвтоEnum состояние;
        public int времяОтпрВРейс;
        public int МаксВместимость;
        public ПоказателиРаботыАвто показателиРаботы;

        public static event EventHandler<AutoEventArg> СобытиеПриездНаОстановку;
        public static event EventHandler<AutoEventArg> СобытиеОтправлениеСОстановки;
        public int КодМаршрута { get { return маршрут.Код; } }
        public string НазваниеМаршрута { get { return маршрут.Название; } }
        public int КолПас { get { return массивПассажиров.Count; } }
        public bool Заполнен { get { return (массивПассажиров.Count == МаксВместимость); } }

        public Авто()
        {
            показателиРаботы = new ПоказателиРаботыАвто();
        }
        public void Инициализация(Маршрут маршрут_arg, int максВместимость_arg, int времяОтпр_arg)
        {
            код = маршрут_arg.Код.ToString() + "_" + времяОтпр_arg.ToString();
            показателиРаботы.инициализация(маршрут_arg.КодыОстановок);
            маршрут = маршрут_arg;
            МаксВместимость = максВместимость_arg;
            времяОтпрВРейс = времяОтпр_arg;
            состояние = СостояниеАвтоEnum.вПути;
            времяДоСменыСостояния = 1;
            кодСледОстановки = маршрут.НачОстановка;
            номерСледОстановки = 0;

            if (массивПассажиров == null)
                массивПассажиров = new List<Пассажир>();
            else
                массивПассажиров.Clear();
        }
        public void ОтработатьТакт(int текТакт)
        {
            времяДоСменыСостояния -= 1;
            if (времяДоСменыСостояния <= 0)
            { //произошло какое-то событие
                if (состояние == СостояниеАвтоEnum.наОстановке)
                    //отправить авто с остановки
                    ОтправитьСОстановки(текТакт);
                else
                    //приезд авто на остановку
                    //сообщение для координатора, чтобы проверить возможность добавления авто на остановку
                    СобытиеПриездНаОстановку?.Invoke(this, new AutoEventArg(кодСледОстановки, текТакт));
            }
        }
        public void ПриездНаОстановкуРазрешен(int текТакт)
        {
            //высадка пассажиров
            показателиРаботы.приездНаОстановку(номерСледОстановки, текТакт, -времяДоСменыСостояния);
            int колВышПас = ВысадкаНаОстановке(текТакт);
            ////определение времени стоянки на остановке
            времяДоСменыСостояния = Math.Max(колВышПас / 40, 1);
            состояние = СостояниеАвтоEnum.наОстановке;
        }
        //проверяет массив пассажиров в авто и высаживает их из авто
        // при этом генерируется событие "Пассажир.СобытиеДоехал" 
        private int ВысадкаНаОстановке(int текТакт)
        {
            int колВышПас = 0, i = 0;
            Пассажир пас;
            while (i < массивПассажиров.Count)
            {
                пас = массивПассажиров[i];
                if (пас.КодОстПересадки == кодСледОстановки)
                {  //высадить пассажира
                    массивПассажиров.Remove(пас);
                    показателиРаботы.высадкаПассажира(пас, номерСледОстановки);
                    пас.завершитьПоездку(текТакт);
                    колВышПас++;
                }
                else
                    i++;
            }
            return колВышПас;
        }
        private void ОтправитьСОстановки(int текТакт)
        {
            int кодТекОст = кодСледОстановки;
            //сообщение для координатора, чтобы удалить авто с остановки
            СобытиеОтправлениеСОстановки?.Invoke(this, new AutoEventArg(кодТекОст, текТакт));
            кодСледОстановки = маршрут.СледОстановкаПоНомеру(номерСледОстановки);
            номерСледОстановки++;
            if (кодТекОст == кодСледОстановки)
            {
                //завершить текущий рейс
                состояние = СостояниеАвтоEnum.рейсЗавершен;
                показателиРаботы.завершениеРейса(this, текТакт);
            }
            else
            {
                //продолжить текущий рейс
                состояние = СостояниеАвтоEnum.вПути;
                времяДоСменыСостояния = маршрут.ВремяДоСледОстановки(кодСледОстановки);
                показателиРаботы.отправлАвтоСОстановки(номерСледОстановки, массивПассажиров.Count);
            }
        }
        public bool ДостижимаОстановка(int кодТекОст, int кодОстНазнач)
        {
            return маршрут.ДостижимаОстановка(кодТекОст, кодОстНазнач);
        }
        ////при подъезде к остановке нет места
        public void ЖдатьСвободногоМеста()
        {//    //???????(ничего не делать)
        }
        ////запись пассажира в массивПассажиров
        public bool ДобавитьПассажира(Пассажир пас)
        {
            if (!Заполнен)
            {
                пас.КодМаршрута = КодМаршрута;
                массивПассажиров.Add(пас);
                показателиРаботы.посадкаПассажира(пас, номерСледОстановки, маршрут.СтоимостьПроезда);
                return true;
            }
            else
                return false;
        }
    }
}